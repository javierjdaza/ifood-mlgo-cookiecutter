#!/usr/bin/env python

# We set the following parameters:
#
# Parameter                Environment Variable              Default Value
# ---------                --------------------              -------------
# number of workers        MODEL_SERVER_WORKERS              the number of CPU cores
# timeout                  MODEL_SERVER_TIMEOUT              60 seconds

import multiprocessing
import os
import signal
import subprocess
import sys
import shutil


cpu_count = multiprocessing.cpu_count()

model_server_timeout = os.environ.get('MODEL_SERVER_TIMEOUT', 60)
model_server_workers = int(os.environ.get('MODEL_SERVER_WORKERS', cpu_count))
model_server_log_access_enabled = os.environ.get('MODEL_SERVER_LOG_ACCESS', '').upper() == 'ENABLED'


def sigterm_handler(gunicorn_pid):
    try:
        os.kill(gunicorn_pid, signal.SIGTERM)
    except OSError:
        pass

    sys.exit(0)


def start_server():

    print('Starting the inference server with {} workers.'.format(model_server_workers))

    gunicorn_params = ['gunicorn',
                       '--timeout', str(model_server_timeout),
                       '-k', 'gevent',
                       '-b', '0.0.0.0:8080',
                       '-w', str(model_server_workers),
                       'sgmk.serve_routes:app']

    if model_server_log_access_enabled:
        gunicorn_params.extend(['--access-logfile', '-'])

    gunicorn = subprocess.Popen(gunicorn_params)
    signal.signal(signal.SIGTERM, lambda a: sigterm_handler(gunicorn.pid))

    pids = set([gunicorn.pid])

    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    sigterm_handler(gunicorn.pid)
    print('Inference server exiting')


if __name__ == '__main__':
    start_server()
